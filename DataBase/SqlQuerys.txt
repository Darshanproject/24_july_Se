create database database_name;
create table table_name(
Column_names datatype size;

);



use database_name;
create table table_name(
Column_names datatype size;
);



INSERT INTO popel (name,age) VALUES ("Dhaval",36),("Mayur",26)
,("Kunal",20);


alter table table_name add column_name datatype size ;


ALTER TABLE popel ADD mobile bigint (10);



INSERT INTO popel(mobile) VALUES(9512714369);


update table_name set column_name="Values" where id =?id


UPDATE popel SET mobile = 8888888888 WHERE id=1;



TRUNCATE  TABLE popel;



INSERT INTO `popel` (`id`, `name`, `age`, `mobile`) VALUES (NULL, 'Hardik', '20', '998989988989'), (NULL, 'Dhurvi', '22', '565656566565'), (NULL, 'Jay', '27', '78787878787'), (NULL, 'Ronak', '22', '58585858585');



DROP TABLE popel;


CREATE TABLE Employees(
	id int PRIMARY key AUTO_INCREMENT NOT NULL,
    E_name varchar (50),
	E_Address varchar(60),
	E_email varchar(50),
	E_des varchar(50)
);



insert INTO employees (E_name,E_Address,E_email,E_des) VALUES ("Kunal","Thaltej","kunal@gmail.com","Developer"),("Ankit","Shivranjani","ankit@gmail.com","Back End-Developer"),("Mayur","Gandhinagar","mayur@gmail.com","HR");
insert INTO employees (E_name,E_Address,E_email,E_des,mobile) VALUES ("Kunal","Thaltej","kunal@gmail.com","Developer",8523697415),("Ankit","Shivranjani","ankit@gmail.com","Back End-Developer",7896541239),("Mayur","Gandhinagar","mayur@gmail.com","HR",9874526310);
TRUNCATE TABLE employees;



DROP TABLE employees;


ALTER TABLE employees ADD mobile bigint(10);


UPDATE employees SET  E_Address="Gurkul" WHERE E_name="Ankit";


SELECT * FROM `employees` WHERE 1;


SELECT (E_name) FROM `employees` WHERE 1


INSERT INTO `salarys` (`id`, `name`, `salary`, `mobile`) VALUES (NULL, 'kunal', '22000', '9998036978'), (NULL, 'Ankit', '25000', '98745633210'), (NULL, 'Mark', '50000', '8745963210');


SELECT SUM(salary) FROM `salarys` ;

SELECT MAX(salary) FROM salarys;

SELECT MIN(salary) FROM `salarys`;

SELECT AVG(salary) FROM `salarys`;


SELECT FIRST(salary) FROM `salarys`;

SELECT SUM(salary) AS totalsalary FROM `salarys` ;




ALTER TABLE employees DROP mobile;



CREATE TABLE office(
id int PRIMARY KEY AUTO_INCREMENT NOT Null,
   name varchar(20),
    salarys bigint(50),
	dept varchar(20),
    f_key int NOT Null,
    FOREIGN KEY (f_key) REFERENCES salarys(id)
);




INSERT INTO `office` (name, salarys, dept,f_key) VALUES 
('kunal', '22000','Developer',1), ('Ankit', '25000', 'Developer',2), 
('Mark', '50000', 'HR',3);



INSERT INTO `man` (`id`, `name`, `salarys`, `F_name`) VALUES (NULL, 'Dodiya', '85000', '3'), 
(NULL, 'Shara', '97000', '2'), (NULL, 'Shah', '100000', '1');



SELECT * FROM students WHERE stud_name LIKE "s%";


09-oct-2023  Monday

SELECT office.name, salarys.salary FROM office INNER JOIN salarys  ON
office.id = salarys.id



SELECT salarys.name, office.salarys FROM salarys LEFT JOIN office ON
salarys.id = office.id;

SELECT salarys.name, office.salarys FROM office RIGHT JOIN salarys ON
office.id = salarys.id;


=================
Trigger:
=================
A trigger is a set of actions that are run automatically when a specified change 
operation (SQL INSERT, UPDATE, or DELETE statement) is performed on a specified table. 
Triggers are useful for tasks such as enforcing business rules, validating input data, 
and keeping an audit trail.

===========================================================================================
The CREATE TRIGGER statement creates a new trigger. Here is the basic syntax of the CREATE TRIGGER statement:
===========================================================================================
Syntax :

CREATE TRIGGER trigger_name
{BEFORE | AFTER} {INSERT | UPDATE| DELETE }
ON table_name FOR EACH ROW
trigger_body;


In this syntax:

1) First, specify the name of the trigger that you want to create after the CREATE 
TRIGGER keywords. Note that the trigger name must be unique within a database.

2) Next, specify the trigger action time which can be either BEFORE or AFTER which 
indicates that the trigger is invoked before or after each row is modified.

3) Then, specify the operation that activates the trigger, which can be INSERT, UPDATE, 
or DELETE.

4) After that, specify the name of the table to which the trigger belongs after the ON 
keyword.

Finally, specify the statement to execute when the trigger activates. If you want to execute multiple statements, you use the BEGIN END compound statement.

===========================================================================================
MySQL trigger examples
===========================================================================================

1-


------------------------------------------
2-
 
insert into employees(fname,lname,email) values ("hitesh","gajeria","h@gmail.com"),
("jitesh","kajeria","j@gmail.com"),
("mitesh","dajeria","m@gmail.com"),
("ritesh","rajeria","r@gmail.com"),
("nitesh","tajeria","n@gmail.com")

---------------------------------------------
First, create a new table named employees_audit to keep the changes to the employees table:

CREATE TABLE employees_audit (
    id INT AUTO_INCREMENT PRIMARY KEY,
    employeeNumber INT NOT NULL,
    lastname VARCHAR(50) NOT NULL,
    changedat DATETIME DEFAULT NULL,
    action VARCHAR(50) DEFAULT NULL
);
------------------------------------------------
Next, create a BEFORE UPDATE trigger that is invoked before a change is made to the employees table.

-

CREATE TRIGGER before_employee_update 
    BEFORE UPDATE ON employees
    FOR EACH ROW 
 INSERT INTO employees_audit
 SET action = 'update',
     employeeNumber = OLD.employeeNumber,
     lastname = OLD.lname,
     changedat = NOW();


Inside the body of the trigger, we used the OLD keyword to access values of the columns employeeNumber and lastname of the row affected by the trigger.

--------------------------------------------------

Then, show all triggers in the current database by using the SHOW TRIGGERS statement:

-

SHOW TRIGGERS;

--------------------------------------------------
After that, update a row in the employees table:

-

UPDATE employees 
SET 
    lname = 'kankaria'
WHERE
    employeeNumber = 1;


-------------------------------------------------

Finally, query the employees_audit table to check if the trigger was fired by the UPDATE statement:

-

SELECT * FROM employees_audit;


As you see clearly from the output, the trigger was automatically invoked and inserted a new row into the employees_audit table.
---------------------------------------------------

===========================================================================================



Stored Procedure is use like a function in C/C++

1) Simple


Syntax:

1) Create a Procedure :

	Delimiter $$
	create procedure procedure_name()
	begin
		some query
	end

	$$
================================================

2) Calling a Procedure


call procedure_name();

===============================================
Example: 1

DELIMITER $$

CREATE PROCEDURE insertdata()
BEGIN
	INSERT into employee (ename,esal,email) VALUES ('nirav','patel','nirav@gmail.com');
END

call insertdata()

Example 2:


DELIMITER $$
CREATE PROCEDURE updatedata()
BEGIN
	UPDATE employee SET email ='sumit@gmail.com' WHERE id=3;
END
$$

call updatedata()

BEGIN
	insert into employee (ename,esal,email) VALUES (name,salary,emp_email);
END


Begin

Declare usal int;

	select salary into usal from person where p_id=uid;

	if(usal > 10000) THEN
	  
	      SET  result="good";

	else
	     SET result="bad";
	
	End if;
	
End;




BEGIN
	updata employee SET
    email = e_email
    WHERE id = eid;
END






$$
